plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.7'
    id 'checkstyle'
    id 'pmd'
}

group = 'com.example'
version = '1.0.0'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // OpenCSV
    api 'com.opencsv:opencsv:5.9'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    
    // SLF4J (ログ出力用)
    api 'org.slf4j:slf4j-api:2.0.9'
    runtimeOnly 'ch.qos.logback:logback-classic:1.4.11'
    
    // 独自アノテーション処理用
    compileOnly 'com.example:excel-rw-wrapper:1.0.0'
    annotationProcessor 'com.example:excel-rw-wrapper:1.0.0'
    
    // Test Dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Lombok設定
compileJava {
    options.compilerArgs += ['-parameters']
}

compileTestJava {
    options.compilerArgs += ['-parameters']
}

// 日本語対応のためのエンコーディング設定
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// JARファイル名の設定
jar {
    archiveBaseName = 'excel-rw-wrapper'
    archiveVersion = '1.0.0'
}

// ソースJARとJavadocJARの生成
java {
    withSourcesJar()
    withJavadocJar()
}

// Javadoc設定
javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.windowTitle = 'Excel RW Wrapper API Documentation'
    options.docTitle = 'Excel RW Wrapper API Documentation'
    options.header = 'Excel RW Wrapper'
    options.author = true
    options.version = true
    options.use = true
    options.splitIndex = true
    options.noDeprecated = false
    options.noDeprecatedList = false
    options.noIndex = false
    options.noNavBar = false
    options.noTree = false
    options.noHelp = false
    options.noTimestamp = false
    options.noComment = false
    options.serialWarn = false
    options.links = [
        'https://docs.oracle.com/en/java/javase/21/docs/api/',
        'https://opencsv.sourceforge.net/apidocs/'
    ]
    
    // エラーを無視してJavadocを生成
    failOnError = false
}

// JaCoCo設定
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    // demoパッケージを除外
    afterEvaluate {
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/demo/**')
        })
    }
    
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.15 // 15%以上のカバレッジを要求（demoパッケージ除外後）
            }
        }
    }
}

// テスト実行後にカバレッジレポートを生成
test {
    finalizedBy jacocoTestReport
}

// SpotBugs設定
spotbugs {
    toolVersion = '4.8.3'
    ignoreFailures = false
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

spotbugsTest {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// Checkstyle設定
checkstyle {
    toolVersion = '10.12.4'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
    maxWarnings = 0
}

// PMD設定
pmd {
    toolVersion = '7.0.0'
    ruleSetFiles = files('config/pmd/pmd-ruleset.xml')
    ruleSets = []
    ignoreFailures = false
}

pmdMain {
    reports {
        xml.required = true
        html.required = true
    }
}

pmdTest {
    reports {
        xml.required = true
        html.required = true
    }
}

// Javadoc生成タスク
task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    destinationDir = file("$buildDir/docs/javadoc")
    
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.windowTitle = 'Excel RW Wrapper API Documentation'
    options.docTitle = 'Excel RW Wrapper API Documentation'
    options.header = 'Excel RW Wrapper'
    options.author = true
    options.version = true
    options.use = true
    options.splitIndex = true
    options.noDeprecated = false
    options.noDeprecatedList = false
    options.noIndex = false
    options.noNavBar = false
    options.noTree = false
    options.noHelp = false
    options.noTimestamp = false
    options.noComment = false
    options.serialWarn = false
    options.links = [
        'https://docs.oracle.com/en/java/javase/21/docs/api/',
        'https://opencsv.sourceforge.net/apidocs/'
    ]
    
    // エラーを無視してJavadocを生成
    failOnError = false
}

// ビルド時にJavadocも生成
build.dependsOn generateJavadoc

// JavadocJARの依存関係を設定
javadocJar.dependsOn generateJavadoc
